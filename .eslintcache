[{"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\index.js":"1","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Notes\\NotePage.js":"2","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Context.js":"3","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Folders\\Folder.js":"4","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Folders\\FolderList.js":"5","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\AddForms\\AddFolderForm.js":"6","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\EditForms\\EditNoteForm.js":"7","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Notes\\Note.js":"8","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Folders\\FolderPage.js":"9","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\config.js":"10","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\HomePage.js":"11","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\AddForms\\AddNoteForm.js":"12","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\App.js":"13","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\EditForms\\EditFolderForm.js":"14","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Notes\\NoteList.js":"15","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\ErrorHandlers\\ValidationError.js":"16"},{"size":275,"mtime":1605898294805,"results":"17","hashOfConfig":"18"},{"size":2577,"mtime":1605913117508,"results":"19","hashOfConfig":"18"},{"size":280,"mtime":1605809950277,"results":"20","hashOfConfig":"18"},{"size":1465,"mtime":1605912989102,"results":"21","hashOfConfig":"18"},{"size":733,"mtime":1605898749990,"results":"22","hashOfConfig":"18"},{"size":2714,"mtime":1605913378562,"results":"23","hashOfConfig":"18"},{"size":5796,"mtime":1605913215420,"results":"24","hashOfConfig":"18"},{"size":1543,"mtime":1605913107636,"results":"25","hashOfConfig":"18"},{"size":1314,"mtime":1605913087037,"results":"26","hashOfConfig":"18"},{"size":125,"mtime":1606776326589,"results":"27","hashOfConfig":"18"},{"size":695,"mtime":1605811490956,"results":"28","hashOfConfig":"18"},{"size":5108,"mtime":1605913376962,"results":"29","hashOfConfig":"18"},{"size":4521,"mtime":1606776950656,"results":"30","hashOfConfig":"18"},{"size":3782,"mtime":1605912947851,"results":"31","hashOfConfig":"18"},{"size":1290,"mtime":1605913106447,"results":"32","hashOfConfig":"18"},{"size":413,"mtime":1605912952398,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1icjdng",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\index.js",[],["79","80"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Notes\\NotePage.js",["81","82"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Context from \"../Context\";\r\nimport config from \"../config\"\r\n// import propTypes from \"prop-types\";\r\n\r\nfunction deleteNoteRequest(noteId, callback) {\r\n  fetch(`${config.API_ENDPOINT}/notes/${noteId}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${config.API_KEY}`\r\n    },\r\n  })\r\n    .then((res) => {\r\n      if (!res.ok) {\r\n        return res.json().then((error) => {\r\n          throw error;\r\n        });\r\n      }\r\n      return res\r\n    })\r\n    .then(() => {\r\n      callback(noteId);\r\n    })\r\n    .catch((error) => {\r\n      console.error(error);\r\n    });\r\n}\r\n\r\nexport default function NotePage(props) {\r\n  return (\r\n    <Context.Consumer>\r\n      {(context) => {\r\n        const currentNote = context.notes.find((note) => {\r\n          if (note.id === Number(props.match.params.noteId)) {\r\n            return note;\r\n          }\r\n        });\r\n        const currentFolder = context.folders.find((folder) => {\r\n          if (currentNote.folderid === folder.id) {\r\n            return folder;\r\n          }\r\n        });\r\n        return (\r\n          <div className=\"content-container\">\r\n            <Link to=\"/\">\r\n              <button className=\"back-btn\">Go Back</button>\r\n            </Link>\r\n            <div className=\"Folder-Sidebar\">\r\n              <div className=\"folder\">\r\n                <h2>{currentFolder.name}</h2>\r\n              </div>\r\n            </div>\r\n            <div className=\"Note-section\">\r\n              <div className=\"note\">\r\n                <h2>{currentNote.name}</h2>\r\n                <p>Date modified on: {currentNote.modified}</p>\r\n                <Link to={`/editNote/${currentNote.id}`}>\r\n                  <button\r\n                    type=\"button\"\r\n                  >\r\n                  Edit Note\r\n                  </button>\r\n                </Link>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => deleteNoteRequest(props.match.params.noteId, context.deleteNote)}\r\n                >\r\n                  Delete Note\r\n                </button>\r\n                <p>{currentNote.content}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </Context.Consumer>\r\n  );\r\n}\r\n\r\n// NotePage.propTypes = {\r\n//   match: propTypes.shape({\r\n//     isExact: propTypes.bool,\r\n//     params: propTypes.shape({\r\n//       noteId: propTypes.string,\r\n//     }),\r\n//     path: propTypes.string,\r\n//     url: propTypes.string,\r\n//   }),\r\n// };\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Context.js",[],["83","84"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Folders\\Folder.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Folders\\FolderList.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\AddForms\\AddFolderForm.js",["85"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Context from \"../Context\";\r\nimport ValidationError from \"../ErrorHandlers/ValidationError\";\r\nimport config from \"../config\"\r\n// import propTypes from \"prop-types\";\r\n\r\nclass AddFolderForm extends React.Component {\r\n  static contextType = Context;\r\n  \r\n  state = {\r\n    name: {\r\n      value: \"\",\r\n      touched: false,\r\n    },\r\n      error: null,\r\n  };\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const { name } = this.state;\r\n    const folder = { name: name.value };\r\n    const url = `${config.API_ENDPOINT}/folders`;\r\n    const options = {\r\n      method: \"POST\",\r\n      body: JSON.stringify(folder),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${config.API_KEY}`\r\n      },\r\n    };\r\n\r\n    //POST request here\r\n    fetch(url, options)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(\"Something went wrong, please try again later\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({ name: { value: folder.name } });\r\n        this.context.addFolder(data);\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          error: err.message,\r\n        });\r\n      });\r\n  }\r\n\r\n  updateFolderName(name) {\r\n    this.setState({ name: { value: name, touched: true } });\r\n  }\r\n\r\n  validateFolderName() {\r\n    const folderName = this.state.name.value;\r\n    if (folderName.trim() == \"\") {\r\n      return \"Folder name is required\";\r\n    }\r\n    if (!folderName.match(/^[A-Za-z]+$/)) {\r\n      return \"Folder name must only contain letters A-Z (not case sensitive)\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Link to=\"/\">\r\n          <button className=\"back-btn\">Go Back</button>\r\n        </Link>\r\n        <form id=\"folder-form\" onSubmit={(e) => this.handleSubmit(e)}>\r\n          <label htmlFor=\"folderName\">Folder Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"folderName\"\r\n            id=\"folderName\"\r\n            onChange={(e) => this.updateFolderName(e.target.value)}\r\n          />\r\n          {this.state.name.touched && (\r\n            <ValidationError message={this.validateFolderName()} />\r\n          )}\r\n          <button\r\n            className=\"addFolder-btn\"\r\n            type=\"submit\"\r\n            disabled={this.validateFolderName()}\r\n          >\r\n            Add Folder\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// AddFolderForm.propTypes = {\r\n//   name: propTypes.shape({\r\n//     value: propTypes.string,\r\n//     touched: propTypes.bool,\r\n//   }),\r\n//   error: propTypes.bool,\r\n// };\r\n\r\nexport default AddFolderForm;\r\n",["86","87"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\EditForms\\EditNoteForm.js",["88","89"],"import React from \"react\"\r\nimport Context from \"../Context\"\r\nimport { withRouter } from 'react-router-dom'\r\nimport ValidationError from \"../ErrorHandlers/ValidationError\";\r\nimport config from \"../config\"\r\n\r\nclass EditNoteForm extends React.Component {\r\n  static contextType = Context\r\n\r\n  state = {\r\n    error: null,\r\n    name : {\r\n      value: '',\r\n      touched: false,\r\n    },\r\n    content : {\r\n      value: '',\r\n      touched: false,\r\n    },\r\n    folderid : {\r\n      value: '',\r\n      touched: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    const { noteid } = this.props.match.params\r\n    fetch(`${config.API_ENDPOINT}/notes/${noteid}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${config.API_KEY}`\r\n      }\r\n    })\r\n      .then(res => {\r\n        if(!res.ok)\r\n          return res.json().then(error => Promise.reject(error))\r\n        \r\n        return res.json()\r\n      })\r\n      .then(responseData => {\r\n        this.setState({\r\n          name: { value: responseData.name },\r\n          content: { value: responseData.content },\r\n          folderid: { value: responseData.folderid }\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ error })\r\n      })\r\n  }\r\n\r\n  handleChangeName = (newName) => {\r\n    this.setState({\r\n      name: { value: newName, touched: true }\r\n    })\r\n  }\r\n  \r\n  handleChangeContent = (newContent) => {\r\n    this.setState({\r\n      content: { value: newContent, touched: true }\r\n    })\r\n  }\r\n\r\n  handleChangeFolderid = (newFolderId) => {\r\n    this.setState({\r\n      folderid: { value: newFolderId, touched: true }\r\n    })\r\n  }\r\n\r\n  validateNoteName() {\r\n    const noteName = this.state.name.value;\r\n    if (noteName.trim() == \"\") {\r\n      return \"Note name is required\";\r\n    }\r\n    if (!noteName.match(/^[A-Za-z]+$/)) {\r\n      return \"Note name must only contain letters A-Z (not case sensitive)\";\r\n    }\r\n  }\r\n\r\n  validateNoteContent() {\r\n    const noteContent = this.state.content.value;\r\n    if (noteContent.trim() == \"\") {\r\n      return \"You must specify content inside of the new note\";\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { noteid } = this.props.match.params\r\n    const name = this.state.name.value\r\n    const content = this.state.content.value\r\n    const folderid = this.state.folderid.value\r\n    const newNote = { name, content, folderid }\r\n\r\n    //PATCH request here\r\n    fetch(`${config.API_ENDPOINT}/notes/${noteid}`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify(newNote),\r\n      headers: {\r\n        \"content-type\" : \"application/json\",\r\n        \"Authorization\" : `Bearer ${config.API_KEY}`\r\n      }\r\n    })\r\n      .then(res => {\r\n        if(!res.ok)\r\n          return res.json().then(error => Promise.reject(error))\r\n        \r\n        return res.json()\r\n      })\r\n      .then(responseData => {\r\n        this.setState({\r\n          name: { value: responseData.name },\r\n          content: { value: responseData.content },\r\n          folderid: { value: responseData.folderid }\r\n        }, () => {\r\n          this.context.updateNote(responseData)\r\n          this.props.history.push(\"/\")\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ error })\r\n      })\r\n  }\r\n\r\n  handleClickCancel = () => {\r\n    this.props.history.push(\"/\")\r\n  }\r\n\r\n  render(){\r\n    const { folders } = this.context\r\n    const { error } = this.state\r\n    const name = this.state.name.value\r\n    const content = this.state.content.value\r\n    const folderid = this.state.folderid.value\r\n    return (\r\n      <section className='EditNote'>\r\n        <h2>Edit Note</h2>\r\n        <form \r\n          className=\"EditNote__form\" \r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <div className='EditNote__error' role='alert'>\r\n            {error && <p>{error.message}</p>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor='name'>\r\n              Note Name:\r\n              {' '}\r\n            </label>\r\n            <input\r\n              type='text'\r\n              name='name'\r\n              id='name'\r\n              placeholder='Random Note Name'\r\n              required\r\n              value={name}\r\n              onChange={(e) => this.handleChangeName(e.target.value)}\r\n            />\r\n            {this.state.name.touched && (\r\n            <ValidationError message={this.validateNoteName()} />\r\n            )}\r\n          </div>\r\n          <textarea\r\n            type=\"text\"\r\n            name=\"content\"\r\n            id=\"content\"\r\n            rows=\"6\"\r\n            cols=\"50\"\r\n            required\r\n            value={content}\r\n            onChange={(e) => this.handleChangeContent(e.target.value)}\r\n          />\r\n          {this.state.content.touched && (\r\n            <ValidationError message={this.validateNoteContent()} />\r\n          )}\r\n          <select\r\n            id=\"folders\"\r\n            name=\"folders\"\r\n            value={folderid}\r\n            onChange={(e) => this.handleChangeFolderid(e.target.value)}\r\n          >\r\n            {folders.map((folder) => (\r\n              <option key={folder.id} value={folder.id}>\r\n                {folder.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          <div className='EditNote__buttons'>\r\n            <button \r\n              type='button' \r\n              onClick={this.handleClickCancel}\r\n            >\r\n              Cancel\r\n            </button>\r\n            {' '}\r\n            <button \r\n              type='submit'\r\n              disabled={(this.validateNoteName(), this.validateNoteContent())}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(EditNoteForm);","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Notes\\Note.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Folders\\FolderPage.js",["90","91"],"import React from \"react\";\r\nimport FolderList from \"./FolderList\";\r\nimport NoteList from \"../Notes/NoteList\";\r\nimport Context from \"../Context\";\r\n// import propTypes from \"prop-types\";\r\n\r\nclass FolderPage extends React.Component {\r\n  static contextType = Context;\r\n  render() {\r\n    const { folders, notes } = this.context;\r\n    const folder = folders.find((folder) => {\r\n      if (folder.id === Number(this.props.match.params.folderid)){\r\n        return folder;\r\n      }\r\n    });\r\n    if (folder === undefined) {\r\n      throw new Error(\"This folder doesn't exist\");\r\n    }\r\n    const folderNotes = notes.filter((note) => {\r\n      if (note.folderid === Number(this.props.match.params.folderid)) {\r\n        return note;\r\n      }\r\n    });\r\n    return (\r\n      <div className=\"content-container\">\r\n        <div className=\"Folder-Sidebar\">\r\n          <FolderList folders={folders}/>\r\n        </div>\r\n        <div className=\"Note-section\">\r\n          <NoteList notes={folderNotes}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// FolderPage.propTypes = {\r\n//   match: propTypes.shape({\r\n//     isExact: propTypes.bool,\r\n//     params: propTypes.shape({\r\n//       folderId: propTypes.string,\r\n//     }),\r\n//     path: propTypes.string,\r\n//     url: propTypes.string,\r\n//   }),\r\n// };\r\n\r\nexport default FolderPage;\r\n",["92","93"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\config.js",["94"],"export default {\r\n  API_ENDPOINT: `https://hidden-thicket-63515.herokuapp.com`,\r\n  API_KEY: process.env.REACT_APP_API_KEY,\r\n}",["95","96"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\HomePage.js",[],["97","98"],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\AddForms\\AddNoteForm.js",["99","100"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Context from \"../Context\";\r\nimport ValidationError from \"../ErrorHandlers/ValidationError\";\r\nimport config from \"../config\"\r\n// import propTypes from \"prop-types\";\r\n\r\nclass AddNoteForm extends React.Component {\r\n  static contextType = Context;\r\n  \r\n  state = {\r\n    name: {\r\n      value: \"\",\r\n      touched: false,\r\n    },\r\n    content: {\r\n      value: \"\",\r\n      touched: false,\r\n    },\r\n    folder: {\r\n      value: \"\",\r\n      touched: false,\r\n    },\r\n    error: null,\r\n  };\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    \r\n    const note = {\r\n      name: event.target[\"note-name-select\"].value,\r\n      content: event.target[\"note-content-select\"].value,\r\n      folderid: event.target[\"note-folder-select\"].value,\r\n      modified: new Date(),\r\n    };\r\n    const url = `${config.API_ENDPOINT}/notes`;\r\n    const options = {\r\n      method: \"POST\",\r\n      body: JSON.stringify(note),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${config.API_KEY}`\r\n      },\r\n    };\r\n\r\n    //POST request here\r\n    fetch(url, options)\r\n      .then((res) => {\r\n        if (!res.ok) {\r\n          throw new Error(\"Something went wrong, please try again later\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        this.setState({\r\n          name: { value: note.name },\r\n          content: { value: note.content },\r\n          folder: { value: note.folder },\r\n          modified: { value: note.modified },\r\n        });\r\n        this.context.addNote(data);\r\n      })\r\n      .catch((err) => {\r\n        this.setState({\r\n          error: err.message,\r\n        });\r\n      });\r\n  }\r\n\r\n  updateNoteName(name) {\r\n    this.setState({ name: { value: name, touched: true } });\r\n  }\r\n\r\n  updateNoteContent(content) {\r\n    this.setState({ content: { value: content, touched: true } });\r\n  }\r\n\r\n  updateNoteFolder(folderid) {\r\n    this.setState({ folder: { value: folderid, touched: true } });\r\n  }\r\n\r\n  validateNoteName() {\r\n    const noteName = this.state.name.value;\r\n    if (noteName.trim() == \"\") {\r\n      return \"Note name is required\";\r\n    }\r\n    if (!noteName.match(/^[A-Za-z]+$/)) {\r\n      return \"Note name must only contain letters A-Z (not case sensitive)\";\r\n    }\r\n  }\r\n\r\n  validateNoteContent() {\r\n    const noteContent = this.state.content.value;\r\n    if (noteContent.trim() == \"\") {\r\n      return \"You must specify content inside of the new note\";\r\n    }\r\n  }\r\n\r\n  validateFolderSelect() {\r\n    const folderid = this.state.folder.value;\r\n    if (folderid.trim() === \"\" || folderid === \"...\") {\r\n      return \"You must specify an existing folder to store this new note\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { folders = [] } = this.context;\r\n    return (\r\n      <>\r\n        <Link to=\"/\">\r\n          <button className=\"back-btn\">Go Back</button>\r\n        </Link>\r\n        <form id=\"note-form\" onSubmit={(e) => this.handleSubmit(e)}>\r\n          <label htmlFor=\"note-name-select\">Note Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"note-name-select\"\r\n            id=\"note-name-select\"\r\n            onChange={(e) => this.updateNoteName(e.target.value)}\r\n          />\r\n          {this.state.name.touched && (\r\n            <ValidationError message={this.validateNoteName()} />\r\n          )}\r\n          <label htmlFor=\"note-content-select\">Content:</label>\r\n          <textarea\r\n            name=\"note-content-select\"\r\n            id=\"note-content-select\"\r\n            rows=\"6\"\r\n            cols=\"50\"\r\n            onChange={(e) => this.updateNoteContent(e.target.value)}\r\n          />\r\n          {this.state.content.touched && (\r\n            <ValidationError message={this.validateNoteContent()} />\r\n          )}\r\n          <label htmlFor=\"note-folder-select\">Folder</label>\r\n          <select\r\n            id=\"note-folder-select\"\r\n            name=\"note-folder-select\"\r\n            onChange={(e) => this.updateNoteFolder(e.target.value)}\r\n          >\r\n            <option value={null}>...</option>\r\n            {folders.map((folder) => (\r\n              <option key={folder.id} value={folder.id}>\r\n                {folder.name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n          {this.state.folder.touched && (\r\n            <ValidationError message={this.validateFolderSelect()} />\r\n          )}\r\n          <button\r\n            className=\"addNote-btn\"\r\n            type=\"submit\"\r\n            disabled={(this.validateNoteName(), this.validateNoteContent(), this.validateFolderSelect())}\r\n          >\r\n            Add Note\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// AddNoteForm.propTypes = {\r\n//   name: propTypes.shape({\r\n//     value: propTypes.string,\r\n//     touched: propTypes.bool,\r\n//   }),\r\n//   content: propTypes.shape({\r\n//     value: propTypes.string,\r\n//     touched: propTypes.bool,\r\n//   }),\r\n//   folder: propTypes.shape({\r\n//     value: propTypes.string,\r\n//     touched: propTypes.bool,\r\n//   }),\r\n//   error: propTypes.bool,\r\n// };\r\n\r\nexport default AddNoteForm;\r\n","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\App.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\EditForms\\EditFolderForm.js",["101"],"import React from \"react\";\r\nimport { withRouter } from 'react-router-dom'\r\nimport Context from \"../Context\";\r\nimport ValidationError from \"../ErrorHandlers/ValidationError\";\r\nimport config from \"../config\"\r\n\r\nclass EditFolderForm extends React.Component {\r\n  static contextType = Context;\r\n  state = {\r\n    name: \"\",\r\n    touched: false,\r\n    error: null,\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { folderid } = this.props.match.params\r\n    fetch(`${config.API_ENDPOINT}/folders/${folderid}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"authorization\": `Bearer ${config.API_KEY}`\r\n      }\r\n    })\r\n      .then(res => {\r\n        if(!res.ok)\r\n          return res.json().then(error => Promise.reject(error))\r\n        \r\n        return res.json()\r\n      })\r\n      .then(responseData => {\r\n        this.setState({\r\n          name: responseData.name\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ error })\r\n      })\r\n  }\r\n\r\n  handleChangeName = (e) => {\r\n    this.setState({\r\n      name: e.target.value\r\n    })\r\n  }\r\n\r\n  validateFolderName = () => {\r\n    const folderName = this.state.name;\r\n    if (folderName.trim() == '') {\r\n      return 'Folder name is required';\r\n    }\r\n    if (!folderName.match(/^[A-Za-z]+$/)) {\r\n      return 'Folder name must only contain letters A-Z (not case sensitive)';\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { folderid } = this.props.match.params\r\n    const { name } = this.state\r\n    const newFolder = { name }\r\n\r\n    //PATCH request here\r\n    fetch(`${config.API_ENDPOINT}/folders/${folderid}`, {\r\n      method: \"PATCH\",\r\n      body: JSON.stringify(newFolder),\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${config.API_KEY}`\r\n      }\r\n    })\r\n      .then(res => {\r\n        if(!res.ok) {\r\n          return res.json().then(error => Promise.reject(error))\r\n        }\r\n        return res.json()\r\n      })\r\n      .then(responseData => {\r\n        this.setState({\r\n          name: responseData.name,\r\n        }, () => {\r\n          this.context.updateFolder(responseData)\r\n          this.props.history.push(\"/\")\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ error })\r\n      })\r\n  }\r\n\r\n  handleClickCancel = () => {\r\n    this.props.history.push(\"/\")\r\n  };\r\n\r\n  render() {\r\n    const { error, name } = this.state\r\n    return (\r\n      <section className='EditFolder'>\r\n        <h2>Edit Folder</h2>\r\n        <form\r\n          className='EditFolder__form'\r\n          onSubmit={(e) => this.handleSubmit(e)}\r\n        >\r\n          <div className='EditFolder__error' role='alert'>\r\n          {error && <p>{error.message}</p>}\r\n          </div>\r\n          <div>\r\n            <label htmlFor='name'>\r\n            Folder Name:\r\n            {' '}\r\n            </label>\r\n            <input\r\n            type='text'\r\n            name='name'\r\n            id='name'\r\n            placeholder='Random folder!'\r\n            required\r\n            value={name}\r\n            onChange={(e) => this.handleChangeName(e)}\r\n            />\r\n            {this.state.touched && (\r\n            <ValidationError message={this.validateFolderName()} />\r\n            )}\r\n          </div>\r\n          <div className='EditFolder__buttons'>\r\n            <button type='button' onClick={this.handleClickCancel}>\r\n              Cancel\r\n            </button>\r\n            {' '}\r\n            <button \r\n              type='submit' \r\n              disabled={this.validateFolderName()}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(EditFolderForm);","C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\Notes\\NoteList.js",[],"C:\\Users\\Andy\\Desktop\\ThinkfulProjects\\noteful-client-v2\\src\\ErrorHandlers\\ValidationError.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":35,"column":55,"nodeType":"108","messageId":"109","endLine":35,"endColumn":57},{"ruleId":"106","severity":1,"message":"107","line":40,"column":61,"nodeType":"108","messageId":"109","endLine":40,"endColumn":63},{"ruleId":"102","replacedBy":"110"},{"ruleId":"104","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":58,"column":27,"nodeType":"114","messageId":"115","endLine":58,"endColumn":29},{"ruleId":"102","replacedBy":"116"},{"ruleId":"104","replacedBy":"117"},{"ruleId":"112","severity":1,"message":"113","line":74,"column":25,"nodeType":"114","messageId":"115","endLine":74,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":84,"column":28,"nodeType":"114","messageId":"115","endLine":84,"endColumn":30},{"ruleId":"106","severity":1,"message":"107","line":11,"column":42,"nodeType":"108","messageId":"109","endLine":11,"endColumn":44},{"ruleId":"106","severity":1,"message":"118","line":19,"column":45,"nodeType":"108","messageId":"109","endLine":19,"endColumn":47},{"ruleId":"102","replacedBy":"119"},{"ruleId":"104","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":1,"nodeType":"123","endLine":4,"endColumn":2},{"ruleId":"102","replacedBy":"124"},{"ruleId":"104","replacedBy":"125"},{"ruleId":"102","replacedBy":"126"},{"ruleId":"104","replacedBy":"127"},{"ruleId":"112","severity":1,"message":"113","line":84,"column":25,"nodeType":"114","messageId":"115","endLine":84,"endColumn":27},{"ruleId":"112","severity":1,"message":"113","line":94,"column":28,"nodeType":"114","messageId":"115","endLine":94,"endColumn":30},{"ruleId":"112","severity":1,"message":"113","line":49,"column":27,"nodeType":"114","messageId":"115","endLine":49,"endColumn":29},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["128"],["129"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["128"],["129"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.",["128"],["129"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["128"],["129"],["128"],["129"],"no-global-assign","no-unsafe-negation"]